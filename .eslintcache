[{"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\App.tsx":"1","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\index.tsx":"2","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\index.ts":"3","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\store\\store.ts":"4","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\user.action.ts":"5","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\index.ts":"6","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\userReducer\\user.reducer.ts":"7","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Home.tsx":"8","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\SearchForm.tsx":"9","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\user\\userActionTypes.ts":"10","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\searchReducer\\search.reducer.ts":"11","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\search\\searchActionTypes.ts":"12","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\search.action.ts":"13","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\wordListReducer\\wordList.reducer.ts":"14","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\wordList\\wordListActionTypes.ts":"15","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\ListSaveForm.tsx":"16","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\wordList.action.ts":"17","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\ListNavigation.tsx":"18","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\SearchResult.tsx":"19","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\Navigation.tsx":"20","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Note.tsx":"21","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Signup.tsx":"22","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Signin.tsx":"23","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\WordSaved.tsx":"24","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Quiz.tsx":"25","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\QuizBar.tsx":"26"},{"size":2360,"mtime":1612160720370,"results":"27","hashOfConfig":"28"},{"size":294,"mtime":1612009217412,"results":"29","hashOfConfig":"28"},{"size":217,"mtime":1611813411011,"results":"30","hashOfConfig":"28"},{"size":211,"mtime":1611473041728,"results":"31","hashOfConfig":"28"},{"size":2836,"mtime":1611842142611,"results":"32","hashOfConfig":"28"},{"size":367,"mtime":1611809180014,"results":"33","hashOfConfig":"28"},{"size":1364,"mtime":1611644544477,"results":"34","hashOfConfig":"28"},{"size":321,"mtime":1612188561317,"results":"35","hashOfConfig":"28"},{"size":3112,"mtime":1612103062604,"results":"36","hashOfConfig":"28"},{"size":177,"mtime":1611648283008,"results":"37","hashOfConfig":"28"},{"size":1351,"mtime":1612000088360,"results":"38","hashOfConfig":"28"},{"size":211,"mtime":1611993037983,"results":"39","hashOfConfig":"28"},{"size":1565,"mtime":1612000357665,"results":"40","hashOfConfig":"28"},{"size":2191,"mtime":1612169186047,"results":"41","hashOfConfig":"28"},{"size":304,"mtime":1612157120862,"results":"42","hashOfConfig":"28"},{"size":5621,"mtime":1612187926562,"results":"43","hashOfConfig":"28"},{"size":5317,"mtime":1612170147739,"results":"44","hashOfConfig":"28"},{"size":3524,"mtime":1612102518399,"results":"45","hashOfConfig":"28"},{"size":3340,"mtime":1612190949530,"results":"46","hashOfConfig":"28"},{"size":1707,"mtime":1612076682324,"results":"47","hashOfConfig":"28"},{"size":218,"mtime":1612101033026,"results":"48","hashOfConfig":"28"},{"size":2762,"mtime":1612098722939,"results":"49","hashOfConfig":"28"},{"size":2376,"mtime":1612099640455,"results":"50","hashOfConfig":"28"},{"size":2192,"mtime":1612102296140,"results":"51","hashOfConfig":"28"},{"size":3740,"mtime":1612182932875,"results":"52","hashOfConfig":"28"},{"size":675,"mtime":1612172024478,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"180hya7",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\App.tsx",[],["111","112"],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\index.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\index.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\store\\store.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\user.action.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\index.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\userReducer\\user.reducer.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Home.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\SearchForm.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\user\\userActionTypes.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\searchReducer\\search.reducer.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\search\\searchActionTypes.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\search.action.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\reducers\\wordListReducer\\wordList.reducer.ts",["113"],"import { act } from 'react-dom/test-utils';\r\nimport { WordListType } from '../../actions/actionTypes/wordList/wordListAction';\r\nimport { WordListTypes } from '../../actions/actionTypes/wordList/wordListActionTypes';\r\n\r\nconst initialState = {\r\n  lists: [\r\n    {\r\n      id: '',\r\n      word: ''\r\n    }\r\n  ],\r\n  list: {\r\n    id: '',\r\n    word: '',\r\n    memo: null,\r\n    examples: []\r\n  },\r\n  quiz: {\r\n    answer: '',\r\n    example: []\r\n  },\r\n  error: null,\r\n  loading: false,\r\n  message: null\r\n};\r\n\r\ninterface WordListState {\r\n  lists: {\r\n    id: string;\r\n    word: string;\r\n  }[];\r\n  list: {\r\n    id: string;\r\n    word: string;\r\n    memo: null | string;\r\n    examples:\r\n      | []\r\n      | {\r\n          id: string;\r\n          example: string;\r\n        }[];\r\n  };\r\n  quiz: {\r\n    answer: string;\r\n    example: {\r\n      id: string;\r\n      example: string;\r\n    }[];\r\n  };\r\n  error: null | string;\r\n  loading: boolean;\r\n  message: null | string;\r\n}\r\n\r\nexport const wordListReducer = (state: WordListState = initialState, action: WordListType) => {\r\n  switch (action.type) {\r\n    case WordListTypes.ACTION_START:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case WordListTypes.ACTION_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    case WordListTypes.SAVE_LIST:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        message: action.payload\r\n      };\r\n    case WordListTypes.GET_LISTS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        lists: action.payload,\r\n        message: ''\r\n      };\r\n    case WordListTypes.GET_LIST:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        list: action.payload\r\n      };\r\n    case WordListTypes.DELETE_LIST:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        message: action.payload,\r\n        quiz: []\r\n      };\r\n    case WordListTypes.QUIX_LIST:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        quiz: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionTypes\\wordList\\wordListActionTypes.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\ListSaveForm.tsx",["114"],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\redux\\actions\\actionCreators\\wordList.action.ts",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\ListNavigation.tsx",["115"],"import { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getLists } from '../redux';\r\nimport { State } from '../types/state';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/components/ListNavigation.scss';\r\nimport { ReactComponent as DateIcon } from '../assets/images/date.svg';\r\nimport { ReactComponent as AlphabetIcon } from '../assets/images/alphabet.svg';\r\n\r\ninterface ListNavigationProps {\r\n  getLists: any;\r\n  lists: {\r\n    word: string;\r\n    id: string;\r\n  }[];\r\n  loading: boolean;\r\n  success: null | string;\r\n}\r\n\r\ninterface SortedList {\r\n  word: string;\r\n  id: string;\r\n}\r\n\r\nconst ListNavigation: React.FC<ListNavigationProps> = ({ getLists, lists, loading, success }) => {\r\n  const [isSuccess, setIsSuccess] = useState<string | null>('');\r\n  const [sortList, setSortList] = useState<SortedList[]>([]);\r\n\r\n  useEffect(() => {\r\n    console.log('ListNavigation Rendered');\r\n\r\n    getLists();\r\n\r\n    setIsSuccess(success);\r\n\r\n    // if (success) {\r\n    //   console.log('List Navigation Rendered x 2');\r\n    //   setIsSuccess(String(uuidv4()));\r\n    //   getLists();\r\n    // }\r\n  }, [getLists, setIsSuccess, success, sortList]);\r\n\r\n  const onClick = () => {\r\n    if (sortList.length > 0) {\r\n      setSortList([]);\r\n      return;\r\n    }\r\n\r\n    let SortedLists = [];\r\n    SortedLists.push(Object.assign({}, lists));\r\n\r\n    const defaultListArray = Object.values(SortedLists[0]);\r\n\r\n    function compare(a: { word: string; id: string }, b: { word: string; id: string }) {\r\n      const wordA = a.word.toUpperCase();\r\n      const wordB = b.word.toUpperCase();\r\n\r\n      let comparison = 0;\r\n\r\n      if (wordA > wordB) {\r\n        comparison = 1;\r\n      }\r\n\r\n      if (wordA < wordB) {\r\n        comparison = -1;\r\n      }\r\n\r\n      return comparison;\r\n    }\r\n\r\n    setSortList(defaultListArray.sort(compare));\r\n  };\r\n\r\n  const wordList =\r\n    lists &&\r\n    lists.map((list) => {\r\n      return (\r\n        <li key={list.id} className='list-navigation__item'>\r\n          <Link to={`/note/${list.id}`}>{list.word}</Link>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  const sortedList = sortList\r\n    ? sortList.map((list) => {\r\n        return (\r\n          <li key={list.id} className='list-navigation__item'>\r\n            <Link to={`/note/${list.id}`}>{list.word}</Link>\r\n          </li>\r\n        );\r\n      })\r\n    : null;\r\n\r\n  const dateSortIcon = (\r\n    <div className='list-navigation__sort'>\r\n      <div className='list-navigation__icon'>\r\n        <DateIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n  const alphabetIcon = (\r\n    <div className='list-navigation__sort'>\r\n      <div className='list-navigation__icon'>\r\n        <AlphabetIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className='list-navigation'>\r\n      <h3 className='list-navigation__heading'>Word list</h3>\r\n      <button className='list-navigation__sort-button' onClick={onClick}>\r\n        {sortList.length > 0 ? 'date' : 'alphabet'}\r\n        {sortList.length > 0 ? dateSortIcon : alphabetIcon}\r\n      </button>\r\n      <ul className='list-navigation__list'>{sortList.length > 0 ? sortedList : wordList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: State) => {\r\n  return {\r\n    lists: store.wordList.lists,\r\n    loading: store.wordList.loading,\r\n    success: store.wordList.message\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getLists: () => dispatch(getLists())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListNavigation);\r\n","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\SearchResult.tsx",["116"],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\Navigation.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Note.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Signup.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Signin.tsx",[],"C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\WordSaved.tsx",["117"],"import { deleteList, getList } from '../redux';\r\nimport { State } from '../types/state';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport '../styles/components/WordSaved.scss';\r\n\r\ninterface WordSavedProps {\r\n  list: { id: string; word: string; memo: string | null; examples: { _id: string; example: string }[] };\r\n  loading: boolean;\r\n  getList: any;\r\n  deleteList: any;\r\n  success: string;\r\n}\r\n\r\nconst WordSaved: React.FC<WordSavedProps> = ({ list, loading, getList, deleteList }) => {\r\n  const location = useLocation().pathname.split('/').pop();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getList(location);\r\n  }, [getList, location]);\r\n\r\n  const onClick = () => {\r\n    if (window.confirm('Once you delete the list, you lose the data. Are you sure that you delete the list?')) {\r\n      deleteList(location);\r\n      history.push('/');\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  let exampleArray;\r\n  if (list.examples.length > 0) {\r\n    exampleArray = list.examples.map((ex: { _id: string; example: string }) => {\r\n      return (\r\n        <p key={ex._id} className='note-preview__example'>\r\n          {ex.example}\r\n        </p>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className='note-preview'>\r\n      {list && (\r\n        <div>\r\n          <div>\r\n            <h2 className='note-preview__word'>{list.word}</h2>\r\n            {exampleArray}\r\n            {list.memo && <p className='note-preview__memo'>{list.memo}</p>}\r\n          </div>\r\n          <div>\r\n            <button onClick={onClick} className='note-preview__delete'>\r\n              Remove\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: State) => {\r\n  return {\r\n    list: store.wordList.list,\r\n    loading: store.wordList.loading,\r\n    success: store.wordList.message\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getList: (id: string) => dispatch(getList(id)),\r\n    deleteList: (id: string) => dispatch(deleteList(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WordSaved);\r\n","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\pages\\Quiz.tsx",["118"],"import { getList, takeQuiz } from '../redux';\r\nimport '../styles/pages/Quiz.scss';\r\nimport { State } from '../types/state';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport { ReactComponent as CheckSVG } from '../assets/images/check.svg';\r\nimport { ReactComponent as CloseSVG } from '../assets/images/close.svg';\r\n\r\ninterface QuizProps {\r\n  lists: {\r\n    word: string;\r\n    id: string;\r\n  }[];\r\n  getList: any;\r\n  list: {\r\n    id: string;\r\n    word: string;\r\n    memo: null | string;\r\n    examples: [] | { _id: string; example: string }[];\r\n  };\r\n  takeQuiz: any;\r\n  quiz: {\r\n    answer: string;\r\n    example: {\r\n      example: string;\r\n      _id: string;\r\n    }[];\r\n  };\r\n  success: null | string;\r\n}\r\n\r\nconst Quiz: React.FC<QuizProps> = ({ lists, getList, list, takeQuiz, quiz, success }) => {\r\n  const [guess, setGuess] = useState('');\r\n\r\n  const [result, setResult] = useState('');\r\n  const [correct, setCorrect] = useState(false);\r\n  // const [listClone, setListClone] = useState<List[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function init() {\r\n      console.log('Quiz rendered');\r\n      const listClone = lists.map((list) => Object.assign({}, list));\r\n      console.log(listClone);\r\n      const randomNum = Math.floor(Math.random() * listClone.length);\r\n      await getList(listClone[randomNum].id);\r\n      takeQuiz();\r\n      setCorrect(false);\r\n      // setIsSuccess(success);\r\n      // console.log(success);\r\n    }\r\n\r\n    init();\r\n  }, [takeQuiz, lists, getList, correct]);\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!guess) {\r\n      return;\r\n    }\r\n\r\n    if (!quiz.answer) {\r\n      return;\r\n    }\r\n\r\n    setResult('');\r\n\r\n    if (guess === quiz.answer) {\r\n      setResult('Correct');\r\n    }\r\n\r\n    if (guess !== quiz.answer) {\r\n      setResult('Wrong');\r\n    }\r\n  };\r\n\r\n  const hideAnswer = (example: string) => {\r\n    let keyword = '_';\r\n    for (let i = 0; i < quiz.answer.length; i++) {\r\n      keyword += '_';\r\n    }\r\n    return example.replace(quiz.answer, keyword);\r\n  };\r\n\r\n  const displayQuiz = quiz.answer ? (\r\n    <div className='quiz-content__question'>\r\n      {quiz.example.map((q) => {\r\n        return <div key={q._id}>{hideAnswer(q.example)}</div>;\r\n      })}\r\n    </div>\r\n  ) : null;\r\n\r\n  const onClick = () => {\r\n    setCorrect(true);\r\n    setResult('');\r\n    setGuess('');\r\n  };\r\n\r\n  return (\r\n    <div className='quiz-content'>\r\n      <h2>Q</h2>\r\n      {displayQuiz}\r\n      <form onSubmit={onSubmit} className='quiz-content__form'>\r\n        <input className='quiz-content__input' type='text' value={guess} onChange={(e) => setGuess(e.target.value)} />\r\n        <button className='quiz-content__button'>check</button>\r\n      </form>\r\n      {result && (\r\n        <div className='quiz-content__result'>\r\n          <div className='quiz-content__svg'>{result === 'Correct' ? <CheckSVG /> : <CloseSVG />}</div>\r\n          {result}\r\n        </div>\r\n      )}\r\n      {result === 'Correct' ? (\r\n        <div className='quiz-content__next-wrapper'>\r\n          <button className='quiz-content__next' onClick={onClick}>\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        false\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: State) => {\r\n  return {\r\n    list: store.wordList.list,\r\n    lists: store.wordList.lists,\r\n    quiz: store.wordList.quiz,\r\n    success: store.wordList.message\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getList: (id: string) => dispatch(getList(id)),\r\n    takeQuiz: () => dispatch(takeQuiz())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\r\n","C:\\Users\\吉岡寿輝\\Desktop\\react-typescript\\vocab-front\\src\\components\\QuizBar.tsx",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":1,"column":10,"nodeType":"125","messageId":"126","endLine":1,"endColumn":13},{"ruleId":"123","severity":1,"message":"127","line":4,"column":20,"nodeType":"125","messageId":"126","endLine":4,"endColumn":26},{"ruleId":"123","severity":1,"message":"128","line":26,"column":10,"nodeType":"125","messageId":"126","endLine":26,"endColumn":19},{"ruleId":"123","severity":1,"message":"129","line":5,"column":23,"nodeType":"125","messageId":"126","endLine":5,"endColumn":28},{"ruleId":"123","severity":1,"message":"130","line":4,"column":21,"nodeType":"125","messageId":"126","endLine":4,"endColumn":29},{"ruleId":"123","severity":1,"message":"131","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":14},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'act' is defined but never used.","Identifier","unusedVar","'logout' is defined but never used.","'isSuccess' is assigned a value but never used.","'store' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]